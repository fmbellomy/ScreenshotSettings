plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}
sourceCompatibility = 17
targetCompatibility = 17

version = project.mod_version
group = project.maven_group

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    // Cloth Config
    maven {
        name 'Shedaniel'
        url "https://maven.shedaniel.me/"
    }
    // Mod Menu
    maven { url "https://maven.terraformersmc.com/releases/" }
    // YetAnotherConfigLib
    maven { url = "https://maven.isxander.dev/releases" }

}

dependencies {
    // To change the versions see the gradle.yml.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // cloth config for serializing/deserializing config data
    modApi "me.shedaniel.cloth:cloth-config-fabric:10.0.96"
    // Mod Menu
    modApi "com.terraformersmc:modmenu:6.2.2"
    // YetAnotherConfigLib
    modImplementation "dev.isxander:yet-another-config-lib:2.4.2"
    // Iris Shaders integration
    modImplementation "maven.modrinth:iris:1.6.3+1.19.4"
    // templating library for file naming system
    shadow(implementation('org.antlr:ST4:4.3.4'))


}
processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
}

java {
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}
shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set("dev")
    relocate "org.antlr", "com.quantumgarbage.screenshotsettings.shadow.org.antlr"
}
remapJar {
    dependsOn(shadowJar)
    inputFile = tasks.shadowJar.archiveFile
}
jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
